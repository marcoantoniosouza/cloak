-- Create Cloak schema
CREATE USER CLOAK;

-- TABLES
CREATE TABLE CLOAK.TASKS(
  TASK_ID NUMBER PRIMARY KEY,
  TASK_SCHEMA VARCHAR2(1000) NOT NULL,
  TASK_OBJECT VARCHAR2(1000) NOT NULL,
  TASK_OBJECT_TYPE VARCHAR2(10) NOT NULL,
  TASK_OBJECT_METHOD VARCHAR2(1000),
  TASK_OBJECT_PARAMETER NUMBER,
  TASK_OBJECT_COMMENT VARCHAR2(4000),
  TASK_STATUS VARCHAR2(2), -- (C)REATED, (R)UNNING, (F)INISHED, (E)RROR
  TASK_CREATED_AT DATE
);

-- SEQUENCES
CREATE SEQUENCE CLOAK.CLOAK_TASK_ID_SEQ
 START WITH     1
 INCREMENT BY   1
 NOCACHE
 NOCYCLE;

-- Core package
CREATE OR REPLACE PACKAGE CLOAK.CORE AS
  PROCEDURE NEW_TASK(P_IN_TASK_SCHEMA VARCHAR2,
                     P_IN_TASK_OBJECT VARCHAR2,
                     P_IN_TASK_OBJECT_TYPE VARCHAR2,
                     P_IN_TASK_OBJECT_METHOD VARCHAR2 DEFAULT NULL,
                     P_IN_TASK_OBJECT_PARAMETER NUMBER,
                     P_IN_TASK_COMMENT VARCHAR2 DEFAULT NULL,
                     P_OUT_TASK_ID OUT NUMBER);

  PROCEDURE RUNNER(P_IN_TASK_ID NUMBER);

END;

CREATE OR REPLACE PACKAGE BODY CLOAK.CORE AS
  PROCEDURE INSERT_NEW_TASK(P_IN_TASK_SCHEMA VARCHAR2,
                            P_IN_TASK_OBJECT VARCHAR2,
                            P_IN_TASK_OBJECT_TYPE VARCHAR2,
                            P_IN_TASK_OBJECT_METHOD VARCHAR2,
                            P_IN_TASK_OBJECT_PARAMETER NUMBER,
                            P_IN_TASK_COMMENT VARCHAR2,
                            P_OUT_TASK_ID OUT NUMBER) IS 
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN 
    P_OUT_TASK_ID := CLOAK.CLOAK_TASK_ID_SEQ.NEXTVAL;
   
    INSERT INTO CLOAK.TASKS (
      TASK_ID,
      TASK_SCHEMA,
      TASK_OBJECT,
      TASK_OBJECT_TYPE,
      TASK_OBJECT_METHOD,
      TASK_OBJECT_PARAMETER,
      TASK_OBJECT_COMMENT,
      TASK_STATUS,
      TASK_CREATED_AT
    ) VALUES (
      P_OUT_TASK_ID,
      P_IN_TASK_SCHEMA,
      P_IN_TASK_OBJECT,
      P_IN_TASK_OBJECT_TYPE,
      P_IN_TASK_OBJECT_METHOD,
      P_IN_TASK_OBJECT_PARAMETER,
      P_IN_TASK_COMMENT,
      'C',
      SYSDATE
    );
   
    COMMIT;
  END;

  PROCEDURE CHANGE_TASK_STATUS(P_IN_TASK_ID NUMBER, P_IN_TASK_STATUS VARCHAR2) IS 
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN 
    UPDATE CLOAK.TASKS T
    SET T.TASK_STATUS = P_IN_TASK_STATUS
    WHERE T.TASK_ID = P_IN_TASK_ID;
   
    COMMIT;
  END;

  PROCEDURE CREATE_TASK_JOB(P_IN_TASK_ID NUMBER) IS
  BEGIN
   DBMS_SCHEDULER.CREATE_JOB(JOB_NAME   =>  'CLOAK_TASK_JOB_' || P_IN_TASK_ID,
							 JOB_TYPE   =>  'PLSQL_BLOCK',
							 JOB_ACTION =>  'BEGIN CLOAK.CORE.RUNNER(' || P_IN_TASK_ID ||  '); END;',
							 AUTO_DROP  =>  TRUE,
							 ENABLED    =>  TRUE,
							 COMMENTS   =>  'CLOAK_TASK_JOB_' || P_IN_TASK_ID);

  END;

  PROCEDURE NEW_TASK(P_IN_TASK_SCHEMA VARCHAR2,
                     P_IN_TASK_OBJECT VARCHAR2,
                     P_IN_TASK_OBJECT_TYPE VARCHAR2,
                     P_IN_TASK_OBJECT_METHOD VARCHAR2 DEFAULT NULL,
                     P_IN_TASK_OBJECT_PARAMETER NUMBER,
                     P_IN_TASK_COMMENT VARCHAR2 DEFAULT NULL,
                     P_OUT_TASK_ID OUT NUMBER) IS
  BEGIN
    INSERT_NEW_TASK(P_IN_TASK_SCHEMA,
                    P_IN_TASK_OBJECT,
                    P_IN_TASK_OBJECT_TYPE,
                    P_IN_TASK_OBJECT_METHOD,
                    P_IN_TASK_OBJECT_PARAMETER,
                    P_IN_TASK_COMMENT,
                    P_OUT_TASK_ID);
    CREATE_TASK_JOB(P_OUT_TASK_ID);
  END;

  PROCEDURE RUNNER(P_IN_TASK_ID NUMBER) IS
    V_TASK_STATMENT VARCHAR2(1000);
  BEGIN
  	FOR TASK IN (SELECT * FROM CLOAK.TASKS WHERE TASK_ID = P_IN_TASK_ID) LOOP
	  IF (TASK.TASK_OBJECT_TYPE = 'PACKAGE') THEN 
	    V_TASK_STATMENT := TASK.TASK_SCHEMA || '.' || TASK.TASK_OBJECT || '.' || TASK.TASK_OBJECT_METHOD;
	  ELSE
	    V_TASK_STATMENT := TASK.TASK_SCHEMA || '.' || TASK.TASK_OBJECT;
	  END IF;
	    
	  V_TASK_STATMENT := 'BEGIN ' || V_TASK_STATMENT || '(:TASK_ID); END;';
	    
  	  CHANGE_TASK_STATUS(P_IN_TASK_ID, 'R');
  	  EXECUTE IMMEDIATE V_TASK_STATMENT USING TASK.TASK_OBJECT_PARAMETER;
  	  CHANGE_TASK_STATUS(P_IN_TASK_ID, 'F');
    END LOOP;
  EXCEPTION WHEN OTHERS THEN
    CHANGE_TASK_STATUS(P_IN_TASK_ID, 'E');
    RAISE;
  END;

END;



